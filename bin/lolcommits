#!/usr/bin/env ruby

begin
  require 'lolcommits'
rescue LoadError
  require 'rubygems'
  require 'lolcommits'
end

require 'optparse'
require 'methadone'
require 'lolcommits/cli.rb'

# allow logging from everywhere
include Methadone::CLILogging

class App
  include Methadone::Main

  include Lolcommits
  include Lolcommits::CLI

  description 'git-based selfies for software developers (https://lolcommits.github.io)'
  version     Lolcommits::VERSION

  main do
    # check for fatal conditions before execution
    Fatals.die_if_no_valid_ffmpeg_installed! if capture_animated?
    Fatals.die_on_fatal_platform_conditions!

    if options.empty?
      puts no_options_help
    else
      if debug_enabled?
        logger.level = Logger::DEBUG
        debug 'Outputting at DEBUG verbosity'
      end

      if options[:'show-config']
        puts configuration
      elsif options[:plugins]
        puts configuration.plugins_list
      elsif options[:devices]
        puts Platform.device_list
        puts device_list_help
      elsif options[:enable]
        Installation.do_enable(options)
      elsif options[:disable]
        Installation.do_disable
      else
        # all other commands require a vcs repo, check its present and walk up
        # to the root dir
        unless options[:test]
          Fatals.die_if_not_vcs_repo!
          change_dir_to_root_or_repo!
        end

        if options[:last]
          show_last_lolimage
        elsif options[:browse]
          Launcher.open_folder(configuration.loldir)
        elsif options[:timelapse]
          TimelapseGif.new(configuration).run(options[:period])
        elsif options[:config]
          configuration.do_configure!(options[:plugin])
        elsif options[:capture]
          capture_lolcommit
        end
      end
    end
  end

  on('--test', 'run in test mode')
  on('--manual', 'run in manual mode')
  on('--debug', 'show debugging info')
  on('--show-config', 'show configuration file')
  on('--devices', 'list available capture devices (mac only)')
  on('--plugins', 'list all available plugins')
  on('--config', 'configure a plugin')
  on('-p', '--plugin {name}', 'plugin name to use with --config')

  on('-c', '--capture', 'capture lolcommit based on last git commit')
  on('-e', '--enable', 'install lolcommits for this repo')
  on('-d', '--disable', 'uninstall lolcommits for this repo')
  on('-l', '--last', 'view the most recent lolcommit')
  on('-b', '--browse', 'browse this repo\'s lolcommits')

  on('--timelapse', 'generate animated timelapse gif from captured images')
  on('--period {today}', 'period to use for the timelapse gif (today or all)')

  # optional capturing options
  on('--device {name}', 'device name to capture from (mac/linux only)')
  on('-a', '--animate {seconds}', 'enable animated gif captures with duration')
  on('-w', '--delay {seconds}', 'delay before taking a snapshot')
  on('--stealth', 'capture image in stealth mode (no output)')
  on('--fork', 'fork capturing process to the background')
  on('-s', '--sha {string}', 'pass commit sha manually (--test or --manual mode only)')
  on('-m', '--msg {string}', 'pass commit message manually (--test or --manual mode only)')
  on('-r', '--repo {string}', 'pass repo name manually (--test or --manual mode only)')

  #
  # No options specified, help the user out
  #
  def self.no_options_help
    # TODO: make this a contextual helper to know whether lolcommits is enabled
    "Do what exactly?\n" \
      "Try: lolcommits --enable (when in a git repository)\n" \
      'Or:  lolcommits --help'
  end

  # Gets a configuration object.  If running in test mode will override the
  # LOLDIR for the configuration.
  #
  # @return [Lolcommits::Configuration]
  def self.configuration
    if options[:test]
      Configuration.new(loldir: Configuration.loldir_for('test'))
    elsif options[:manual]
      Configuration.new(loldir: Configuration.loldir_for(options[:repo]))
    else
      Configuration.new
    end
  end

  def self.debug_enabled?
    options[:debug] || ENV['LOLCOMMITS_DEBUG'] || false
  end

  def self.device_list_help
    'Specify a device with --device "{device name}" or set the LOLCOMMITS_DEVICE env variable'
  end

  def self.show_last_lolimage
    lolimage = configuration.most_recent
    if lolimage.nil?
      warn 'No lolcommits have been captured for this repository yet.'
      exit 1
    end
    Launcher.open_image(lolimage)
  end

  def self.capture_device
    result = options[:device] || ENV['LOLCOMMITS_DEVICE'] || nil
    result ||= Dir.glob('/dev/video*').first if Platform.platform_linux?
    result
  end

  def self.capture_lolcommit
    should_we_fork  = options[:fork] || ENV['LOLCOMMITS_FORK'] || false
    capture_stealth = options[:stealth] || ENV['LOLCOMMITS_STEALTH'] || false
    capture_delay   = (options[:delay] || ENV['LOLCOMMITS_DELAY']).to_i

    capture_options = {
      capture_delay: capture_delay,
      capture_stealth: capture_stealth,
      capture_device: capture_device,
      capture_animate: capture_animate,
      config: configuration
    }

    process_runner = ProcessRunner.new(configuration)
    process_runner.fork_me?(should_we_fork) do
      if options[:test] or options[:manual]
        info '*** Capturing in test mode.'
        capture_options.merge!(test_capture_options)
      end

      runner = Lolcommits::Runner.new(capture_options)
      runner.run

      # automatically open the image in test mode
      Launcher.open_image(runner.main_image) if options[:test]
    end
  end

  def self.test_capture_options
    {
      message: options[:msg] || 'this is a test message i didnt really commit something',
      sha: options[:sha] || "test-#{rand(10**10)}"
    }
  end

  # Duration for animated capturing
  #
  # If animation is enabled, returns an integer > 0 representing seconds.
  # Seconds will be 0 if no option set, or if the platform doesn't support
  # animated captures (in which case animated capturing will be disabled).
  #
  # @return [Integer]
  def self.capture_animate
    if Platform.can_animate?
      (options[:animate] || ENV['LOLCOMMITS_ANIMATE']).to_i
    else
      0
    end
  end

  def self.capture_animated?
    capture_animate > 0
  end

  # TODO: remove this after implementing gem based plugins
  # https://github.com/mroth/lolcommits/issues/99
  # Until then for local plugin dev, use $LOLCOMMITS_DIR/.plugins directory
  def self.load_local_plugins!
    plugins_dir = Configuration.loldir_for('.plugins')
    Dir.glob("#{plugins_dir}/*.rb").each do |plugin|
      load plugin
    end
  end

  #
  # change working dir to either a repo or the fs root
  #
  def self.change_dir_to_root_or_repo!
    debug 'Walking up dir tree'
    loop do
      cur = File.expand_path('.')
      nxt = File.expand_path('..', cur)
      if nxt == cur
        warn 'Repository root not found'
        return
      end
      return if VCSInfo.repo_root?
      Dir.chdir(nxt)
    end
  end

  #
  # load plugins
  #
  load_local_plugins!

  go!
end
